import cv2
import osan
# Path to save images
dataset_path = "face_dataset"
os.makedirs(dataset_path, exist_ok=True)

# Initialize the webcam
cam = cv2.VideoCapture(0)
cam.set(3, 640)  # Set video width
cam.set(4, 480)  # Set video height

# Load Haar Cascade for face detection
face_detector = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_frontalface_default.xml")

# User details
name = input("Enter the name of the person: ").strip()
user_folder = os.path.join(dataset_path, name)
os.makedirs(user_folder, exist_ok=True)

print("\n[INFO] Initializing face capture. Look at the camera and wait...")

count = 0

while True:
    ret, frame = cam.read()
    if not ret:
        print("[ERROR] Unable to access the camera.")
        break

    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    faces = face_detector.detectMultiScale(gray, scaleFactor=1.2, minNeighbors=5, minSize=(30, 30))

    for (x, y, w, h) in faces:
        cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 0, 0), 2)
        count += 1

        # Save the captured face
        face_image_path = os.path.join(user_folder, f"face_{count}.jpg")
        cv2.imwrite(face_image_path, gray[y:y + h, x:x + w])

        # Stop after 100 images
        if count >= 100:
            break

    # Overlay the count on the video frame
    cv2.putText(frame, f"Images Captured: {count}/100", (10, 30),
                cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

    cv2.imshow("Face Capture", frame)

    # Break loop with 'ESC' key or if 100 images are captured
    if cv2.waitKey(1) & 0xFF == 27 or count >= 100:
        break

# Cleanup
print("\n[INFO] Exiting and cleaning up...")
cam.release()
cv2.destroyAllWindows()

print(f"[INFO] Images saved in '{user_folder}'.")
