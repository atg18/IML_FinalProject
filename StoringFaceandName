from flask import Flask, render_template, request, redirect, url_for
import os
import cv2
import numpy as np
import time
import threading

app = Flask(__name__)

# Path to save images
dataset_path = r"face_dataset"

# Function to perform augmentation 
def augment_image(image):
    augmented_images = []

    # Rotation
    for angle in [-15, 15]:
        h, w = image.shape[:2]
        center = (w // 2, h // 2)
        matrix = cv2.getRotationMatrix2D(center, angle, 1.0)
        rotated = cv2.warpAffine(image, matrix, (w, h))
        augmented_images.append(rotated)

    # Scaling
    for scale in [0.9, 1.1]:
        scaled = cv2.resize(image, None, fx=scale, fy=scale, interpolation=cv2.INTER_LINEAR)
        augmented_images.append(scaled)

    # Horizontal flip
    flipped = cv2.flip(image, 1)
    augmented_images.append(flipped)

    # Translation
    for shift_x, shift_y in [(10, 10), (-10, -10)]:
        matrix = np.float32([[1, 0, shift_x], [0, 1, shift_y]])
        translated = cv2.warpAffine(image, matrix, (image.shape[1], image.shape[0]))
        augmented_images.append(translated)

    return augmented_images

# Function to capture faces and save them
def capture_faces(name):
    user_folder = os.path.join(dataset_path, name)
    os.makedirs(user_folder, exist_ok=True)

    # Initialize the webcam
    cam = cv2.VideoCapture(0)
    cam.set(3, 640)  # Set video width
    cam.set(4, 480)  # Set video height

    # Load Haar Cascade for face detection
    face_detector = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_frontalface_default.xml")

    print(f"\n[INFO] Capturing faces for {name}. Look at the camera and wait...")

    count = 0
    saved_count = 0

    while saved_count < 100:
        ret, frame = cam.read()
        if not ret:
            print("[ERROR] Unable to access the camera.")
            break

        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = face_detector.detectMultiScale(gray, scaleFactor=1.2, minNeighbors=5, minSize=(30, 30))

        for (x, y, w, h) in faces:
            if saved_count >= 100:
                break

            count += 1
            face = gray[y:y + h, x:x + w]

            # Perform augmentation and save augmented images
            augmented_faces = augment_image(face)
            for idx, aug_face in enumerate(augmented_faces):
                if saved_count < 100:
                    aug_image_path = os.path.join(user_folder, f"face_{count}_aug_{idx}.jpg")
                    cv2.imwrite(aug_image_path, aug_face)
                    saved_count += 1
                else:
                    break  # Exit inner loop if 100 images are saved

        # Stop if 100 images are captured
        if saved_count >= 100:
            break

    # Cleanup
    cam.release()
    cv2.destroyAllWindows()

    print(f"[INFO] {name}'s faces captured and saved to {user_folder}.")

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/register', methods=['POST'])
def register_face():
    name = request.form['name'].strip()
    if name:
        # Start capturing faces in a separate thread to avoid blocking the main thread
        threading.Thread(target=capture_faces, args=(name,)).start()
        return render_template('registration_status.html', name=name)
    return redirect(url_for('home'))

@app.route('/done')
def done():
    return render_template('done.html')

if __name__ == '__main__':
    app.run(debug=True)

print("Templates in the app:", os.listdir('templates'))
