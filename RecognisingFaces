from flask import Flask, render_template, Response, jsonify, url_for, redirect
import cv2
import numpy as np
import dlib
import pickle
from datetime import datetime
import os
import csv
import threading

app = Flask(__name__)

# Load pre-trained face encodings
with open('trained_model.pkl', 'rb') as f:
    known_face_encodings, known_face_names = pickle.load(f)

shape_predictor_path = r"data_dlib\shape_predictor_68_face_landmarks.dat"
face_rec_model_path = r"data_dlib\dlib_face_recognition_resnet_model_v1.dat"

detector = dlib.get_frontal_face_detector()
shape_predictor = dlib.shape_predictor(shape_predictor_path)
face_rec_model = dlib.face_recognition_model_v1(face_rec_model_path)

# Global variables
attendance_list = []
feed_active = True

def log_attendance(name):
    log_file = "attendance.csv"
    current_date = datetime.now().strftime('%Y-%m-%d')
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    message = "Attendance marked"

    try:
        if os.path.exists(log_file):
            with open(log_file, mode='r', encoding='utf-8') as file:
                reader = csv.reader(file)
                for row in reader:
                    if len(row) >= 2 and row[0] == name and row[1].startswith(current_date):
                        return

        with open(log_file, mode='a', newline='', encoding='utf-8') as file:
            writer = csv.writer(file)
            if os.stat(log_file).st_size == 0:
                writer.writerow(["Name", "Time", "Message"])
            writer.writerow([name, timestamp, message])
        
        attendance_list.append({"name": name, "date": timestamp.split()[0], "timestamp": timestamp})
    except Exception as e:
        print(f"[ERROR] Failed to log attendance: {e}")


def gen():
    global feed_active

    video_capture = cv2.VideoCapture(0)
    if not video_capture.isOpened():
        return None

    video_capture.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
    video_capture.set(cv2.CAP_PROP_FRAME_HEIGHT, 360)

    try:
        while feed_active:
            ret, frame = video_capture.read()
            if not ret:
                continue

            # Resize the frame for faster processing
            rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

            # Detect faces in the frame
            faces = detector(rgb_frame, 1)
            for face in faces:
                # Get landmarks and encoding for each face
                shape = shape_predictor(rgb_frame, face)
                face_encoding = np.array(face_rec_model.compute_face_descriptor(rgb_frame, shape, num_jitters=5))

                # Calculate distances to known faces
                distances = [np.linalg.norm(np.array(known_encoding) - face_encoding) for known_encoding in known_face_encodings]
                
                name = "Unknown"
                if distances:
                    best_match_index = np.argmin(distances)
                    if distances[best_match_index] < 0.5:
                        name = known_face_names[best_match_index]
                        log_attendance(name)

                # Draw rectangle and label
                x = max(0, face.left())
                y = max(0, face.top())
                x2 = min(frame.shape[1], face.right())
                y2 = min(frame.shape[0], face.bottom())

                color = (0, 255, 0) if name != "Unknown" else (0, 0, 255)

                cv2.rectangle(frame, (x, y), (x2, y2), color, 2)
                cv2.putText(frame, name, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, color, 2)

            # Encode the frame to JPEG format for streaming
            ret, buffer = cv2.imencode('.jpg', frame)
            frame = buffer.tobytes()

            yield (b'--frame\r\n'
                   b'Content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n\r\n')
    finally:
        video_capture.release()

def read_attendance_from_csv():
    attendance_records = []
    log_file = "attendance.csv"
    
    if os.path.exists(log_file):
        try:
            with open(log_file, mode='r', encoding='utf-8') as file:
                reader = csv.reader(file)
                next(reader, None)  # Skip header row
                for row in reader:
                    if len(row) >= 2:
                        attendance_records.append({
                            "name": row[0],
                            "timestamp": row[1],
                            "message": row[2] if len(row) > 2 else ""
                        })
        except Exception as e:
            print(f"[ERROR] Failed to read attendance file: {e}")
    
    return attendance_records

# Routes
@app.route('/')
def home():
    return render_template('home.html')

@app.route('/video_feed')
def video_feed():
    return Response(gen(), mimetype='multipart/x-mixed-replace; boundary=frame')

@app.route('/close_feed', methods=['POST'])
def close_feed():
    global feed_active
    feed_active = False
    return redirect(url_for('attendance'))

@app.route('/attendance')
def attendance():
    csv_attendance = read_attendance_from_csv()
    return render_template('attendance.html', attendance=csv_attendance)

if __name__ == "__main__":
    app.run(debug=True)
