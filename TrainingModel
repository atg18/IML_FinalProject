import random
import os
import dlib
import numpy as np
import sys
import traceback
import pickle  # For saving the model

dataset_path = r'face_dataset'

class FaceRecognition:
    def __init__(self, dataset_path):
        # Initialization code
        try:
            if not os.path.exists(dataset_path):
                raise FileNotFoundError(f"Dataset path does not exist: {dataset_path}")

            shape_predictor_path = r'data_dlib\shape_predictor_68_face_landmarks.dat'
            face_rec_model_path = r'data_dlib\dlib_face_recognition_resnet_model_v1.dat'

            if not os.path.exists(shape_predictor_path):
                raise FileNotFoundError(f"Shape predictor file not found: {shape_predictor_path}")
            if not os.path.exists(face_rec_model_path):
                raise FileNotFoundError(f"Face recognition model file not found: {face_rec_model_path}")

            self.detector = dlib.get_frontal_face_detector()
            self.shape_predictor = dlib.shape_predictor(shape_predictor_path)
            self.face_rec_model = dlib.face_recognition_model_v1(face_rec_model_path)

            self.known_face_encodings = []
            self.known_face_names = []

            self.load_known_faces(dataset_path)
            print(f"[SUCCESS] Loaded {len(self.known_face_names)} faces")

            # Save the trained model
            self.save_model("trained_model.pkl")

        except Exception as e:
            print(f"[ERROR] Initialization failed: {e}")
            traceback.print_exc()
            sys.exit(1)

    def load_known_faces(self, dataset_path, num_jitters=10, num_images=25):
        # Function to load known faces from dataset
        try:
            for person_name in os.listdir(dataset_path):
                person_path = os.path.join(dataset_path, person_name)

                if os.path.isdir(person_path):
                    print(f"[LOADING] Processing faces for: {person_name}")
                    face_count = 0
                    image_files = [image_name for image_name in os.listdir(person_path) 
                                   if image_name.lower().endswith(('.png', '.jpg', '.jpeg'))]
                    selected_images = random.sample(image_files, min(len(image_files), num_images))

                    for image_name in selected_images:
                        image_path = os.path.join(person_path, image_name)

                        try:
                            img = dlib.load_rgb_image(image_path)
                            faces = self.detector(img)
                            for face in faces:
                                shape = self.shape_predictor(img, face)
                                face_encoding = self.face_rec_model.compute_face_descriptor(
                                    img, shape, num_jitters=num_jitters)
                                self.known_face_encodings.append(face_encoding)
                                self.known_face_names.append(person_name)
                                face_count += 1
                        except Exception as img_error:
                            print(f"[WARNING] Error processing {image_path}: {img_error}")

                    print(f"[RESULT] Loaded {face_count} faces for {person_name}")
        except Exception as e:
            print(f"[ERROR] Face loading failed: {e}")
            traceback.print_exc()

    def save_model(self, model_path):
        # Save the trained model to a file
        try:
            with open(model_path, 'wb') as f:
                pickle.dump((self.known_face_encodings, self.known_face_names), f)
            print(f"[SUCCESS] Model saved to {model_path}")
        except Exception as e:
            print(f"[ERROR] Failed to save model: {e}")

if __name__ == "__main__":
    dataset_path = r'face_dataset'
    face_rec = FaceRecognition(dataset_path)
    print("Done")

